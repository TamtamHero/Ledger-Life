[{"/Users/user1/Desktop/Ledger-Life/front/src/index.js":"1","/Users/user1/Desktop/Ledger-Life/front/src/App.js":"2","/Users/user1/Desktop/Ledger-Life/front/src/Grid.js":"3","/Users/user1/Desktop/Ledger-Life/front/src/controller/LedgerLife.js":"4","/Users/user1/Desktop/Ledger-Life/front/src/SidebarLeft.js":"5","/Users/user1/Desktop/Ledger-Life/front/src/SidebarRight.js":"6","/Users/user1/Desktop/Ledger-Life/front/src/ProgressBars.js":"7","/Users/user1/Desktop/Ledger-Life/front/src/DebugBar.js":"8","/Users/user1/Desktop/Ledger-Life/front/src/Simulation.js":"9"},{"size":220,"mtime":1608134842657,"results":"10","hashOfConfig":"11"},{"size":2557,"mtime":1608141514062,"results":"12","hashOfConfig":"11"},{"size":3778,"mtime":1608142172843,"results":"13","hashOfConfig":"11"},{"size":3338,"mtime":1608138255215,"results":"14","hashOfConfig":"11"},{"size":180,"mtime":1608140089809,"results":"15","hashOfConfig":"11"},{"size":148,"mtime":1608140089814,"results":"16","hashOfConfig":"11"},{"size":129,"mtime":1608140089802,"results":"17","hashOfConfig":"11"},{"size":152,"mtime":1608140089764,"results":"18","hashOfConfig":"11"},{"size":351,"mtime":1608140337693,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1dfnb4y",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/user1/Desktop/Ledger-Life/front/src/index.js",[],["40","41"],"/Users/user1/Desktop/Ledger-Life/front/src/App.js",[],"/Users/user1/Desktop/Ledger-Life/front/src/Grid.js",["42"],"/Users/user1/Desktop/Ledger-Life/front/src/controller/LedgerLife.js",["43","44"],"import Web3 from \"web3\";\nimport TruffleContract from \"truffle-contract\";\nimport LedgerLifeArtifact from \"../contracts/LedgerLife.json\";\n\nclass LedgerLife {\n  constructor() {\n    this.connected = false;\n    this.busy = false;\n    this.web3Provider = null;\n    this.web3 = null;\n    this.contracts = {};\n    this.contractsInstances = {};\n  }\n\n  async connect() {\n    if (!this.connected) {\n      if (window.ethereum) {\n        this.web3Provider = window.ethereum;\n        try {\n          // Request account access\n          this.account = await this.web3Provider.request({\n            method: \"eth_requestAccounts\",\n            params: [],\n          });\n        } catch (error) {\n          // User denied account access...\n          console.error(\"User denied account access\");\n        }\n        this.web3 = new Web3(this.web3Provider);\n        this.connected = true;\n        console.log(`connected: ${this.account} ${typeof this.account}`);\n        await this.initContract();\n      }\n    }\n  }\n\n  async initContract() {\n    this.contracts.LedgerLife = TruffleContract(LedgerLifeArtifact);\n    this.contracts.LedgerLife.setProvider(this.web3Provider);\n    console.log(\"contract initialized\");\n    await this.deployContract();\n  }\n\n  async deployContract() {\n    this.contractsInstances.LedgerLife = await this.contracts.LedgerLife.deployed();\n    this.contractDeployed = true;\n    console.log(\"contract deployed\");\n  }\n\n  async getGrid() {\n    return await this.contractsInstances.LedgerLife.getGrid.call();\n  }\n\n  async getPlayers() {\n    return await this.contractsInstances.LedgerLife.getPlayers.call();\n  }\n\n  _serializeCellsArray(cellsArray) {\n    let serialized = new Web3.utils.BN(0);\n    cellsArray.forEach((cell) => {\n      if (cell < 0 || cell >= 32 * 32) {\n        throw new Error(`cell index ${cell} is too high`);\n      }\n      console.log(serialized.toString(2));\n      console.log(cell);\n      serialized = serialized.add(new Web3.utils.BN(cell));\n      console.log(serialized.toString(2));\n      serialized = serialized.mul(new Web3.utils.BN(2 ** 12));\n    });\n    serialized = serialized.mul(new Web3.utils.BN(2 ** 4));\n    serialized = serialized.add(new Web3.utils.BN(cellsArray.length));\n    console.log(serialized.toString(2));\n    console.log(serialized.toString(16));\n    return \"0x\" + serialized.toString(16);\n  }\n\n  async _getFreeID() {\n    let instance = await this.contracts.LedgerLife.deployed();\n    let accounts = await this.web3.eth.getAccounts();\n    let players = await this.getPlayers();\n    players.forEach((player, index) => {\n      if (player === \"0x0000000000000000000000000000000000000000\") {\n        return index;\n      }\n    });\n  }\n\n  async buyCells(cells) {\n    let playerID = this.playerID;\n    if (playerID === 0) {\n      playerID = this._getFreeID();\n    }\n    let serializedCells = this._serializeCellsArray(cells);\n    console.log(serializedCells);\n    let instance = await this.contracts.LedgerLife.deployed();\n    let accounts = await this.web3.eth.getAccounts();\n    return await instance.buyCells(serializedCells, {\n      from: accounts[0],\n    });\n  }\n\n  async life() {\n    let instance = await this.contracts.LedgerLife.deployed();\n    let accounts = await this.web3.eth.getAccounts();\n    return await instance.life({\n      from: accounts[0],\n    });\n  }\n}\n\nexport default LedgerLife;\n","/Users/user1/Desktop/Ledger-Life/front/src/SidebarLeft.js",[],"/Users/user1/Desktop/Ledger-Life/front/src/SidebarRight.js",[],"/Users/user1/Desktop/Ledger-Life/front/src/ProgressBars.js",[],"/Users/user1/Desktop/Ledger-Life/front/src/DebugBar.js",[],"/Users/user1/Desktop/Ledger-Life/front/src/Simulation.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":1,"column":26,"nodeType":"51","messageId":"52","endLine":1,"endColumn":35},{"ruleId":"49","severity":1,"message":"53","line":78,"column":9,"nodeType":"51","messageId":"52","endLine":78,"endColumn":17},{"ruleId":"49","severity":1,"message":"54","line":79,"column":9,"nodeType":"51","messageId":"52","endLine":79,"endColumn":17},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'instance' is assigned a value but never used.","'accounts' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]