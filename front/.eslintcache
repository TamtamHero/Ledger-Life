[{"/Users/user1/Desktop/Ledger-Life/front/src/index.js":"1","/Users/user1/Desktop/Ledger-Life/front/src/App.js":"2","/Users/user1/Desktop/Ledger-Life/front/src/Grid.js":"3","/Users/user1/Desktop/Ledger-Life/front/src/controller/LedgerLife.js":"4","/Users/user1/Desktop/Ledger-Life/front/src/SidebarLeft.js":"5","/Users/user1/Desktop/Ledger-Life/front/src/SidebarRight.js":"6","/Users/user1/Desktop/Ledger-Life/front/src/ProgressBars.js":"7","/Users/user1/Desktop/Ledger-Life/front/src/DebugBar.js":"8","/Users/user1/Desktop/Ledger-Life/front/src/Simulation.js":"9","/Users/user1/Desktop/Ledger-Life/front/src/Shape.js":"10","/Users/user1/Desktop/Ledger-Life/front/src/Cell.js":"11","/Users/user1/Desktop/Ledger-Life/front/src/AnimatedWave.js":"12"},{"size":220,"mtime":1608134842657,"results":"13","hashOfConfig":"14"},{"size":3364,"mtime":1608197748455,"results":"15","hashOfConfig":"14"},{"size":2911,"mtime":1608195244646,"results":"16","hashOfConfig":"14"},{"size":4243,"mtime":1608197719696,"results":"17","hashOfConfig":"14"},{"size":371,"mtime":1608196671296,"results":"18","hashOfConfig":"14"},{"size":1184,"mtime":1608194899004,"results":"19","hashOfConfig":"14"},{"size":512,"mtime":1608150750062,"results":"20","hashOfConfig":"14"},{"size":160,"mtime":1608150750008,"results":"21","hashOfConfig":"14"},{"size":519,"mtime":1608160042463,"results":"22","hashOfConfig":"14"},{"size":1581,"mtime":1608150750084,"results":"23","hashOfConfig":"14"},{"size":189,"mtime":1608195173479,"results":"24","hashOfConfig":"14"},{"size":987,"mtime":1608195889869,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1dfnb4y",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/user1/Desktop/Ledger-Life/front/src/index.js",[],["55","56"],"/Users/user1/Desktop/Ledger-Life/front/src/App.js",[],"/Users/user1/Desktop/Ledger-Life/front/src/Grid.js",[],"/Users/user1/Desktop/Ledger-Life/front/src/controller/LedgerLife.js",["57"],"import Web3 from \"web3\";\nimport TruffleContract from \"truffle-contract\";\nimport LedgerLifeArtifact from \"../contracts/LedgerLife.json\";\n\nconst GRID_WIDTH = 10;\nconst GRID_HEIGHT = 10;\nconst SIZE256 = 32;\nclass LedgerLife {\n  constructor() {\n    this.connected = false;\n    this.busy = false;\n    this.web3Provider = null;\n    this.web3 = null;\n    this.contracts = {};\n    this.contractsInstances = {};\n    this.playerID = null;\n  }\n\n  async connect() {\n    if (!this.connected) {\n      if (window.ethereum) {\n        this.web3Provider = window.ethereum;\n        try {\n          // Request account access\n          this.account = await this.web3Provider.request({\n            method: \"eth_requestAccounts\",\n            params: [],\n          });\n        } catch (error) {\n          // User denied account access...\n          console.error(\"User denied account access\");\n        }\n        this.web3 = new Web3(this.web3Provider);\n        this.connected = true;\n        console.log(`connected: ${this.account} ${typeof this.account}`);\n        await this.initContract();\n      }\n    }\n  }\n\n  async initContract() {\n    this.contracts.LedgerLife = TruffleContract(LedgerLifeArtifact);\n    this.contracts.LedgerLife.setProvider(this.web3Provider);\n    console.log(\"contract initialized\");\n    await this.deployContract();\n  }\n\n  async deployContract() {\n    this.contractsInstances.LedgerLife = await this.contracts.LedgerLife.deployed();\n    this.contractDeployed = true;\n    console.log(\"contract deployed\");\n  }\n\n  async getGrid() {\n    let grid = await this.contractsInstances.LedgerLife.getGrid.call();\n    grid = grid.map((row) => row.toString());\n    console.log(grid);\n    let grid_unpacked = [];\n    for (let i = 0; i < GRID_WIDTH * GRID_HEIGHT; i++) {\n      let segment_num = parseInt(i / SIZE256);\n      let element_num = i % SIZE256;\n      let segment = new Web3.utils.BN(grid[segment_num]);\n      let bits_to_shift = (SIZE256 - element_num - 1) * 8;\n      // console.log(`seg: ${segment_num} e: ${element_num} shift: ${bits_to_shift}`);\n      segment = segment.shrn(bits_to_shift);\n      segment = segment.and(new Web3.utils.BN(0xff));\n      grid_unpacked.push(segment.toNumber());\n      // console.log(segment.toNumber());\n    }\n    console.log(grid_unpacked)\n    return grid_unpacked;\n  }\n\n  async getPlayers() {\n    return await this.contractsInstances.LedgerLife.getPlayers.call();\n  }\n\n  _serializeCellsArray(cellsArray) {\n    let serialized = new Web3.utils.BN(0);\n    cellsArray.forEach((cell) => {\n      if (cell < 0 || cell >= GRID_WIDTH * GRID_HEIGHT) {\n        throw new Error(`cell index ${cell} is too high`);\n      }\n      serialized = serialized.mul(new Web3.utils.BN(2 ** 12));\n      serialized = serialized.add(new Web3.utils.BN(cell));\n    });\n    return \"0x\" + serialized.toString(16);\n  }\n\n  async _getPlayerID(playerAddress) {\n    let players = await this.getPlayers();\n    const alreadyExistingPlayer = players.findIndex((player) => player[0] === playerAddress);\n    if (alreadyExistingPlayer != -1) {\n      console.log(\"Player already exists :)\");\n      return alreadyExistingPlayer;\n    }\n    for (const [index, player] of players.entries()) {\n      if (index !== 0 && player[0] === \"0x0000000000000000000000000000000000000000\") {\n        return index;\n      }\n    }\n    throw new Error(\"No player slot available\");\n  }\n\n  async buyCells(cells) {\n    let accounts = await this.web3.eth.getAccounts();\n    let playerID = this.playerID;\n    if (playerID === null) {\n      playerID = await this._getPlayerID(accounts[0]);\n    }\n    console.log(`playerID: ${playerID}`);\n    let serializedCells = this._serializeCellsArray(cells);\n    console.log(serializedCells);\n    let cellCount = cells.length;\n    let instance = await this.contracts.LedgerLife.deployed();\n    console.log(`Buy ${cellCount} cells at index ${cells} as player ${playerID}`);\n    await instance.buyCells(serializedCells, cellCount, playerID, {\n      from: accounts[0],\n    });\n    this.playerID = playerID;\n  }\n\n  async life() {\n    let instance = await this.contracts.LedgerLife.deployed();\n    let accounts = await this.web3.eth.getAccounts();\n    return await instance.life({\n      from: accounts[0],\n    });\n  }\n}\n\nexport default LedgerLife;\n","/Users/user1/Desktop/Ledger-Life/front/src/SidebarLeft.js",["58"],"import React from \"react\";\nimport Shape from \"./Shape.js\";\n\nconst SidebarLeft = () => {\n  return null;\n  return (\n    <div className={\"sidebar\"}>\n      <div>\n        <Shape name=\"block\" />\n        <Shape name=\"boat\" />\n        <Shape name=\"tub\" />\n        <Shape name=\"glider\" />\n        <Shape name=\"toad\" />\n      </div>\n    </div>\n  );\n};\n\nexport default SidebarLeft;\n","/Users/user1/Desktop/Ledger-Life/front/src/SidebarRight.js",[],"/Users/user1/Desktop/Ledger-Life/front/src/ProgressBars.js",[],"/Users/user1/Desktop/Ledger-Life/front/src/DebugBar.js",["59"],"import React from \"react\";\n\nconst SidebarRight = ({ children }) => {\n  return null; //<div className=\"debug\">{children}</div>;\n};\n\nexport default SidebarRight;\n","/Users/user1/Desktop/Ledger-Life/front/src/Simulation.js",[],"/Users/user1/Desktop/Ledger-Life/front/src/Shape.js",[],"/Users/user1/Desktop/Ledger-Life/front/src/Cell.js",["60"],"import React from \"react\";\n\nexport default ({ empty, color, onClick }) => {\n  return <div className={`${empty?\"empty\":\"\"} cell`} onClick={onClick} style={{ backgroundColor: color }} />;\n};\n","/Users/user1/Desktop/Ledger-Life/front/src/AnimatedWave.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":93,"column":31,"nodeType":"67","messageId":"68","endLine":93,"endColumn":33},{"ruleId":"69","severity":1,"message":"70","line":6,"column":3,"nodeType":"71","messageId":"72","endLine":16,"endColumn":5},{"ruleId":"73","severity":1,"message":"74","line":1,"column":8,"nodeType":"75","messageId":"76","endLine":1,"endColumn":13},{"ruleId":"77","severity":1,"message":"78","line":3,"column":1,"nodeType":"79","endLine":5,"endColumn":3},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]